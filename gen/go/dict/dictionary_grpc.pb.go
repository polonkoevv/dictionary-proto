// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: dict/dictionary.proto

package ssov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IngDictionaryServiceClient is the client API for IngDictionaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngDictionaryServiceClient interface {
	// Word
	// Add Word
	AddWord(ctx context.Context, in *AddWordReq, opts ...grpc.CallOption) (*AddWordRes, error)
	// Get Word
	GetWord(ctx context.Context, in *GetWordReq, opts ...grpc.CallOption) (*GetWordRes, error)
	// Get All Words
	GetAllWords(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllWordsRes, error)
	// Edit Word
	EditWord(ctx context.Context, in *EditWordReq, opts ...grpc.CallOption) (*EditWordRes, error)
	// Delete Word
	DeleWord(ctx context.Context, in *DeleteWordReq, opts ...grpc.CallOption) (*DeleteWordRes, error)
}

type ingDictionaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngDictionaryServiceClient(cc grpc.ClientConnInterface) IngDictionaryServiceClient {
	return &ingDictionaryServiceClient{cc}
}

func (c *ingDictionaryServiceClient) AddWord(ctx context.Context, in *AddWordReq, opts ...grpc.CallOption) (*AddWordRes, error) {
	out := new(AddWordRes)
	err := c.cc.Invoke(ctx, "/auth.ingDictionaryService/addWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingDictionaryServiceClient) GetWord(ctx context.Context, in *GetWordReq, opts ...grpc.CallOption) (*GetWordRes, error) {
	out := new(GetWordRes)
	err := c.cc.Invoke(ctx, "/auth.ingDictionaryService/getWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingDictionaryServiceClient) GetAllWords(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllWordsRes, error) {
	out := new(GetAllWordsRes)
	err := c.cc.Invoke(ctx, "/auth.ingDictionaryService/getAllWords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingDictionaryServiceClient) EditWord(ctx context.Context, in *EditWordReq, opts ...grpc.CallOption) (*EditWordRes, error) {
	out := new(EditWordRes)
	err := c.cc.Invoke(ctx, "/auth.ingDictionaryService/editWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingDictionaryServiceClient) DeleWord(ctx context.Context, in *DeleteWordReq, opts ...grpc.CallOption) (*DeleteWordRes, error) {
	out := new(DeleteWordRes)
	err := c.cc.Invoke(ctx, "/auth.ingDictionaryService/deleWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngDictionaryServiceServer is the server API for IngDictionaryService service.
// All implementations must embed UnimplementedIngDictionaryServiceServer
// for forward compatibility
type IngDictionaryServiceServer interface {
	// Word
	// Add Word
	AddWord(context.Context, *AddWordReq) (*AddWordRes, error)
	// Get Word
	GetWord(context.Context, *GetWordReq) (*GetWordRes, error)
	// Get All Words
	GetAllWords(context.Context, *Empty) (*GetAllWordsRes, error)
	// Edit Word
	EditWord(context.Context, *EditWordReq) (*EditWordRes, error)
	// Delete Word
	DeleWord(context.Context, *DeleteWordReq) (*DeleteWordRes, error)
	mustEmbedUnimplementedIngDictionaryServiceServer()
}

// UnimplementedIngDictionaryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIngDictionaryServiceServer struct {
}

func (UnimplementedIngDictionaryServiceServer) AddWord(context.Context, *AddWordReq) (*AddWordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWord not implemented")
}
func (UnimplementedIngDictionaryServiceServer) GetWord(context.Context, *GetWordReq) (*GetWordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWord not implemented")
}
func (UnimplementedIngDictionaryServiceServer) GetAllWords(context.Context, *Empty) (*GetAllWordsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllWords not implemented")
}
func (UnimplementedIngDictionaryServiceServer) EditWord(context.Context, *EditWordReq) (*EditWordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditWord not implemented")
}
func (UnimplementedIngDictionaryServiceServer) DeleWord(context.Context, *DeleteWordReq) (*DeleteWordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleWord not implemented")
}
func (UnimplementedIngDictionaryServiceServer) mustEmbedUnimplementedIngDictionaryServiceServer() {}

// UnsafeIngDictionaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngDictionaryServiceServer will
// result in compilation errors.
type UnsafeIngDictionaryServiceServer interface {
	mustEmbedUnimplementedIngDictionaryServiceServer()
}

func RegisterIngDictionaryServiceServer(s grpc.ServiceRegistrar, srv IngDictionaryServiceServer) {
	s.RegisterService(&IngDictionaryService_ServiceDesc, srv)
}

func _IngDictionaryService_AddWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngDictionaryServiceServer).AddWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.ingDictionaryService/addWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngDictionaryServiceServer).AddWord(ctx, req.(*AddWordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngDictionaryService_GetWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngDictionaryServiceServer).GetWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.ingDictionaryService/getWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngDictionaryServiceServer).GetWord(ctx, req.(*GetWordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngDictionaryService_GetAllWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngDictionaryServiceServer).GetAllWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.ingDictionaryService/getAllWords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngDictionaryServiceServer).GetAllWords(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngDictionaryService_EditWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditWordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngDictionaryServiceServer).EditWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.ingDictionaryService/editWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngDictionaryServiceServer).EditWord(ctx, req.(*EditWordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngDictionaryService_DeleWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngDictionaryServiceServer).DeleWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.ingDictionaryService/deleWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngDictionaryServiceServer).DeleWord(ctx, req.(*DeleteWordReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IngDictionaryService_ServiceDesc is the grpc.ServiceDesc for IngDictionaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngDictionaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.ingDictionaryService",
	HandlerType: (*IngDictionaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addWord",
			Handler:    _IngDictionaryService_AddWord_Handler,
		},
		{
			MethodName: "getWord",
			Handler:    _IngDictionaryService_GetWord_Handler,
		},
		{
			MethodName: "getAllWords",
			Handler:    _IngDictionaryService_GetAllWords_Handler,
		},
		{
			MethodName: "editWord",
			Handler:    _IngDictionaryService_EditWord_Handler,
		},
		{
			MethodName: "deleWord",
			Handler:    _IngDictionaryService_DeleWord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dict/dictionary.proto",
}
